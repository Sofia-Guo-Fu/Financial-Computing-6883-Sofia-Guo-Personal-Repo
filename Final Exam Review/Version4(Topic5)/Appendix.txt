This version4 differs from version3 in that, apart from the BinomialTreeModel class, 
it also creats a class for Call, and a class for OptionCalculation

It has the following structure:

*BinomialTreeModel02.h/.cpp:

class BinomialTreeModel: 
    private data members: double S0,U,D,R
    public member functions:
        double RiskNeutProb();
        double CalculateAssetPrice(int n, int i) const; 
        void UpdateBinomialTreeModel(double S0_, double U_, double D_, double R_)
        int GetInputData(); 
        And four get functions to access private data memebrs:
        double GetR() const; double GetS0() const; double GetU() const; double GetD() const;
        

* Option04.h/.cpp

class Call:
    private data: int N, double K 
    public memeber function: 
        int GetN() const; 
        double Payoff(double z) const; // note here that the Payoff function only takes one parameter z, 
                                            because K is already inside its data memebers

class OptionCalculation:
    private data: Call *pOption; // this is the interesting part, it has a pointer variable of the type Call,
                                    this way, pOption can access the data memebers and member functions in the Call class using "->"
    member function: 
        double PriceByCRR(const BinomialTreeModel &Model) // note here that it only takes in one parameter Model(S0,U,D,R) passed by reference,
                                                             because N,k are already inside Call class 
    
* OptionCalculation04.cpp

(1) Intialize all the variables
(2) create an object of BinomialTreeModel: BinomialTreeModel Model(S0,U,D,R); 
(3) Create a pointer to a class object via dynamic memory allocation:
    Call *pCall = new Call(N,K); 
(4) Create object of class OptionCalculation:
    OptionCalculation callCalculation(pCall) // and pass the pCall parameter that we just created
    
(5) cout<<<callOptionCalculation.PriceByCRR(Model)

(6) memory free for pCall: delete pCall; 
                           pCall = NULL; 
